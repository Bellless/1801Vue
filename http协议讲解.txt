<!-- HTTP是什么？>>超文本传输协议
    总结：用来跟我们后台（java php python）进行数据通信
     -->
    <!-- HTTP协议的主要特点
        1.支持客户/服务器模式。
        2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。
        3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
        4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。
        5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。
   -->
    <!-- HTTP中的url
    书写格式：http://host[":"port][abs_path]
    port 端口号  abs_path请求的资源url地址（如果URL中没有给出abs_path，那么当它作为请求URI时，必须以“/”的形式给出）
    总结：url就是我们后台给的请求地址（一般类似http://118.24.15.86:3000/user/regist）
    http://118.24.15.86 服务器地址  3000端口号
    -->
    <!-- HTTP中的请求
    一般情况http请求由三部分组成，分别是：请求行、消息报头、请求正文
    请求方法:
    GET     请求获取Request-URI所标识的资源(特征:不用传递参数)
    POST    在Request-URI所标识的资源后附加新的数据
    PUT     请求服务器存储一个资源，并用Request-URI作为其标识
    DELETE  请求服务器删除Request-URI所标识的资源
    请求方法到底用哪种,一般根据后台封装的接口来判断
     -->
    <!-- HTTP的响应(后台返回的数据给前段 我们进行处理)
     HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文
     常见状态代码(状态行)、状态描述、说明：
      200 OK      //客户端请求成功
      400 Bad Request  //客户端请求有语法错误，不能被服务器所理解
      401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 
      403 Forbidden  //服务器收到请求，但是拒绝提供服务
      404 Not Found  //请求资源不存在，eg：输入了错误的URL
      500 Internal Server Error //服务器发生不可预期的错误
      503 Server Unavailable  //服务器当前不能处理客户端的请求，一段时间后可能恢复正常
      eg：HTTP/1.1 200 OK （CRLF）
      响应正文就是服务器返回的资源的内容(在浏览器中 找到请求中的Preview)
      -->
1.响应报头
响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对Request-URI所标识的资源进行下一步访问的信息。
常用的响应报头
Location
Location响应报头域用于重定向接受者到一个新的位置。Location响应报头域常用在更换域名的时候。
Server
Server响应报头域包含了服务器用来处理请求的软件信息。与User-Agent请求报头域是相对应的。下面是
Server响应报头域的一个例子：
Server：Apache-Coyote/1.1
WWW-Authenticate
WWW-Authenticate响应报头域必须被包含在401（未授权的）响应消息中，客户端收到401响应消息时候，并发送Authorization报头域请求服务器对其进行验证时，服务端响应报头就包含该报头域。
eg：WWW-Authenticate:Basic realm="Basic Auth Test!"  //可以看出服务器对请求资源采用的是基本验证机制。


2、实体报头
请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但并不是说实体报头域和实体正文要在一起发送，可以只发送实体报头域。实体报头定义了关于实体正文（eg：有无实体正文）和请求所标识的资源的元信息。
常用的实体报头
Content-Encoding
Content-Encoding实体报头域被用作媒体类型的修饰符，它的值指示了已经被应用到实体正文的附加内容的编码，因而要获得Content-Type报头域中所引用的媒体类型，必须采用相应的解码机制。Content-Encoding这样用于记录文档的压缩方法，eg：Content-Encoding：gzip
Content-Language
Content-Language实体报头域描述了资源所用的自然语言。没有设置该域则认为实体内容将提供给所有的语言阅读
者。eg：Content-Language:da
Content-Length
Content-Length实体报头域用于指明实体正文的长度，以字节方式存储的十进制数字来表示。
Content-Type
Content-Type实体报头域用语指明发送给接收者的实体正文的媒体类型。eg：
Content-Type:text/html;charset=ISO-8859-1
Content-Type:text/html;charset=GB2312
Last-Modified
Last-Modified实体报头域用于指示资源的最后修改日期和时间。
Expires
Expires实体报头域给出响应过期的日期和时间。为了让代理服务器或浏览器在一段时间以后更新缓存中(再次访问曾访问过的页面时，直接从缓存中加载，缩短响应时间和降低服务器负载)的页面，我们可以使用Expires实体报头域指定页面过期的时间。eg：Expires：Thu，15 Sep 2006 16:23:12 GMT
HTTP1.1的客户端和缓存必须将其他非法的日期格式（包括0）看作已经过期。eg：为了让浏览器不要缓存页面，我们也可以利用Expires实体报头域，设置为0，jsp中程序如下：response.setDateHeader("Expires","0");